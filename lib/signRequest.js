const _0x10a144 = _0x30b9;
(function(_0x4cd519, _0x45313c) {
	const _0x2bd153 = _0x30b9,
		_0x3ece4f = _0x4cd519();
	while (!![]) {
		try {
			const _0x28a487 = -parseInt(_0x2bd153(0xf0)) / 0x1 * (-parseInt(_0x2bd153(0xf3)) / 0x2) + parseInt(_0x2bd153(0xeb)) / 0x3 + parseInt(_0x2bd153(0xf9)) / 0x4 * (parseInt(_0x2bd153(0xe6)) / 0x5) + parseInt(_0x2bd153(0xef)) / 0x6 + -parseInt(_0x2bd153(0xee)) / 0x7 + parseInt(_0x2bd153(0xe9)) / 0x8 * (parseInt(_0x2bd153(0xf1)) / 0x9) + -parseInt(_0x2bd153(0xf4)) / 0xa;
			if (_0x28a487 === _0x45313c) break;
			else _0x3ece4f['push'](_0x3ece4f['shift']());
		} catch (_0x371f51) {
			_0x3ece4f['push'](_0x3ece4f['shift']());
		}
	}
}(_0x2415, 0x9e471));

function _0x2415() {
	const _0x56fd89 = ['5qPhMVW', 'env', 'HMAC', '64Yefvlp', 'encode', '641814lxppjj', 'raw', 'exports', '2845598vriCnY', '5695554KlCdgA', '47gWOFJQ', '940617zQIlAQ', 'importKey', '50522Dlgrri', '30847880QashBt', 'replaceAll', 'crypto', 'SECRET', 'subtle', '3812156LxUUes', 'sign'];
	_0x2415 = function() {
		return _0x56fd89;
	};
	return _0x2415();
}
const crypto = require(_0x10a144(0xf6))['webcrypto'];

function _0x30b9(_0x597915, _0x321d9d) {
	const _0x241520 = _0x2415();
	return _0x30b9 = function(_0x30b98b, _0x1dc40e) {
		_0x30b98b = _0x30b98b - 0xe6;
		let _0x1c9e40 = _0x241520[_0x30b98b];
		return _0x1c9e40;
	}, _0x30b9(_0x597915, _0x321d9d);
}


async function signRequest(_0x4fdf12) {
	const _0x454f29 = _0x10a144,
		_0x25c658 = new TextEncoder(),
		_0x382d33 = _0x25c658[_0x454f29(0xea)](process[_0x454f29(0xe7)][_0x454f29(0xf7)] || 'hello\x20adnan'),
		_0x47bd5c = await crypto[_0x454f29(0xf8)][_0x454f29(0xf2)](_0x454f29(0xec), _0x382d33, {
			'name': _0x454f29(0xe8),
			'hash': 'SHA-256'
		}, ![], [_0x454f29(0xfa)]),
		_0x34df71 = 0x1b77400,
		_0xb5f4c9 = Date['now']() + _0x34df71,
		_0x3b3945 = _0x4fdf12 + '@' + _0xb5f4c9,
		_0xb8d6e6 = await crypto[_0x454f29(0xf8)][_0x454f29(0xfa)](_0x454f29(0xe8), _0x47bd5c, _0x25c658[_0x454f29(0xea)](_0x3b3945));
	let _0x5e0bca = btoa(String['fromCharCode'](...new Uint8Array(_0xb8d6e6)));
	return _0x5e0bca = _0x5e0bca[_0x454f29(0xf5)]('+', '-'), {
		'base64Mac': _0x5e0bca,
		'expiry': _0xb5f4c9
	};
}
module[_0x10a144(0xed)] = signRequest;